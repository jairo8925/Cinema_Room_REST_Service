type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", any())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", any())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            reloadSpring();

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 1)
                            .value("column", 1)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(0, 0, 81),
            this::testPurchaseTicket,
            () -> testStats(1, 10, 80),
            this::returnTicket,
            () -> testStats(0, 0, 81),
        };
    }
  learner_created: false
- name: src/cinema/Seat.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonProperty;

    public class Seat {

        @JsonProperty("row")
        private int row;

        @JsonProperty("column")
        private int column;

        @JsonProperty("price")
        private int price;

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
            this.price = setPrice();
        }

        public Seat() {}

        // price is pre-determined by row
        // number and thus it is immutable
        private int setPrice() {
            if (row <= 4) {
                return 10;
            } else {
                return 8;
            }
        }

        // getters and setters

        public int getPrice() {
            return price;
        }

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public boolean equals(Object obj) {
            if (obj instanceof Seat) {
                Seat seat = (Seat) obj;
                return seat.row == this.row && seat.column == this.column;
            } else {
                return false;
            }
        }
    }
  learner_created: true
- name: src/cinema/ErrorController.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.*;

    @RestControllerAdvice
    class ErrorController {

        @ExceptionHandler(CinemaException.class)
        @ResponseBody
        @ResponseStatus(value = HttpStatus.BAD_REQUEST)
        private Error handleErrorMessage(CinemaException e) {
            return new Error(e.getMessage());
        }

    }
  learner_created: true
- name: src/cinema/Error.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonProperty;

    /** This object is used for the response body of
     * a 400 (Bad Request) status code
     */
    public class Error {

        @JsonProperty("error")
        private String error;

        // getters and setters

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }

        public Error(String error) {
            this.error = error;
        }

        public Error() {}


    }
  learner_created: true
- name: src/cinema/Ticket.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonProperty;

    public class Ticket {

        @JsonProperty("seat")
        private Seat seat;

        @JsonProperty("token")
        private String token;

        public Ticket(Seat seat, String token) {
            this.seat = seat;
            this.token = token;
        }

        public Ticket() {}

        public String getToken() {
            return token;
        }

        public void setToken(String token) {
            this.token = token;
        }

        public Seat getSeat() {
            return seat;
        }

        public void setSeat(Seat seat) {
            this.seat = seat;
        }
    }
  learner_created: true
- name: src/cinema/Cinema.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import java.util.ArrayList;
    import java.util.List;

    public class Cinema {

        @JsonProperty("total_rows")
        private int totalRows;

        @JsonProperty("total_columns")
        private int totalColumns;

        @JsonProperty("available_seats")
        private List<Seat> availableSeats;

        public Cinema(int totalRows, int totalColumns) {
            this.totalRows = totalRows;
            this.totalColumns = totalColumns;
            this.availableSeats = fillSeats();
        }

        // fill each spot in cinema rows x columns grid with available seats
        private List<Seat> fillSeats() {
            List<Seat> seats = new ArrayList<>();
            for (int i = 1; i <= totalRows; i++) {
                for (int j = 1; j <= totalColumns; j++) {
                    seats.add(new Seat(i, j));
                }
            }
            return seats;
        }

        // getters and setters

        public int getTotalRows() {
            return totalRows;
        }

        public int getTotalColumns() {
            return totalColumns;
        }

        public List<Seat> getAvailableSeats() {
            return availableSeats;
        }

        public void setTotalRows(int totalRows) {
            this.totalRows = totalRows;
        }

        public void setTotalColumns(int totalColumns) {
            this.totalColumns = totalColumns;
        }

        public void setAvailableSeats(List<Seat> availableSeats) {
            this.availableSeats = availableSeats;
        }
    }
  learner_created: true
- name: src/cinema/CinemaController.java
  visible: true
  text: |
    package cinema;

    import org.springframework.web.bind.annotation.*;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Map;
    import java.util.UUID;

    @RestController
    public class CinemaController {

        private final Cinema cinema = new Cinema(9, 9);
        private final List<Ticket> ticketList = new ArrayList<>();

        @GetMapping("/seats")
        public Cinema getSeats() {
            return this.cinema;
        }

        @PostMapping("/purchase")
        public Map<String, ?> purchaseTicket(@RequestBody Seat seat) {
            int row = seat.getRow();
            int column = seat.getColumn();

            List<Seat> availableSeats = cinema.getAvailableSeats();

            if (row > 9 || row < 1 || column > 9 || column < 1) {
                // respond with 400 status code if user passed a wrong row/column number
                throw new CinemaException("The number of a row or a column is out of bounds!");
            }

            Seat selectedSeat = new Seat(row, column);

            // check if seat is already taken
            if (!availableSeats.contains(selectedSeat)) {
                // respond with 400 status code if seat is taken
                throw new CinemaException("The ticket has been already purchased!");
            } else {
                // remove seat from list once it is purchased
                availableSeats.remove(selectedSeat);
                // generate a random token
                String token = UUID.randomUUID().toString();
                // add bought ticket to the list of tickets
                ticketList.add(new Ticket(selectedSeat, token));
                return Map.of(
                        "token", token,
                        "ticket", selectedSeat
                );
            }
        }

        @PostMapping("/return")
        public Map<String, ?> refundTicket(@RequestBody Ticket t) {
            String token = t.getToken();
            Ticket returned_ticket = null;

            // find the ticket that the token belongs to
            for (Ticket ticket : ticketList) {
                if (ticket.getToken().equals(token)) {
                    returned_ticket = ticket;
                }
            }

            if (returned_ticket == null) {
                // respond with 400 status code if token isn't valid
                throw new CinemaException("Wrong token!");
            } else {
                // remove returned ticket from the ticket list
                ticketList.remove(returned_ticket);
                Seat seat = returned_ticket.getSeat();
                // add the seat back to the available seats
                cinema.getAvailableSeats().add(seat);
                return Map.of(
                        "returned_ticket", seat
                );
            }
        }
    }
  learner_created: true
- name: src/cinema/WrongPasswordException.java
  visible: true
  learner_created: true
- name: src/cinema/InvalidSeatException.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    /** This class is the exception that occurs if the ticket
     * for the chair has already been purchased or the row and
     * column number passed does not belong to any seat
     */
    @ResponseStatus(value = HttpStatus.BAD_REQUEST)
    public class CinemaException extends RuntimeException {

        CinemaException() {
            super();
        }

        CinemaException(String message) {
            super(message);
        }

    }
  learner_created: true
- name: src/cinema/InvalidTokenException.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/948/implement#comment
status: Solved
feedback:
  message: Well done! You finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 16 Jun 2021 06:09:41 UTC
record: -1
